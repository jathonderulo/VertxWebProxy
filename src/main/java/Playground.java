import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.Collections;
import java.util.PriorityQueue;

public class Playground {
    private static final Logger LOG = LoggerFactory.getLogger(Playground.class);

    public static void main(String[] args) {
        String numbers
        int[] nums = Arrays.stream(numbers.split(" ")).mapToInt(Integer::parseInt).toArray();
        int k = 999;
        useHeap(nums, k);
        useArray(nums, k);
    }

    private static void useHeap(int[] nums, int k) {
        StringBuilder sb = new StringBuilder();
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        long start = System.nanoTime();

        for (int num : nums) {
            minHeap.add(num);
            if(minHeap.size() > k) {
                minHeap.poll();
            }
        }

        for (int i = 0; i < k; i++) {
            sb.append(minHeap.poll()).append(" ");
        }

        long end = System.nanoTime();

        System.out.println("\nFunction: heap. Time taken: " + (end - start) + " ns.\n");
    }

    private static void useArray(int[] nums, int k) {
        StringBuilder sb = new StringBuilder();
        long start = System.nanoTime();

        Arrays.sort(nums);

        for (int i = nums.length-1, i2 = 0; i2 < k; i--, i2++) {
            sb.append(nums[i]).append(" ");
        }
        long end = System.nanoTime();
        System.out.println("\n Function: array. Time taken: " + (end-start) + " ns.\n");
    }
}